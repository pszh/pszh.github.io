<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>pszh blog</title>
  <icon>https://www.gravatar.com/avatar/0c319d571264c053afa587386468520c</icon>
  <subtitle>subtitle</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://pszh.github.io/"/>
  <updated>2020-01-16T02:06:24.655Z</updated>
  <id>https://pszh.github.io/</id>
  
  <author>
    <name>pszh</name>
    <email>sizheng.peng@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webpack</title>
    <link href="https://pszh.github.io/2020/01/16/webpack%E5%AD%A6%E4%B9%A0/"/>
    <id>https://pszh.github.io/2020/01/16/webpack学习/</id>
    <published>2020-01-16T02:06:24.654Z</published>
    <updated>2020-01-16T02:06:24.655Z</updated>
    
    <content type="html"><![CDATA[<h2 id="webpack-基础篇"><a href="#webpack-基础篇" class="headerlink" title="webpack 基础篇"></a>webpack 基础篇</h2><pre><code>### 安装本地webpack</code></pre><ul><li>webpack webpack-cli -D</li></ul><p>​ <a href="https://www.webpackjs.com/concepts/#插件-plugins-" target="_blank" rel="noopener">https://www.webpackjs.com/concepts/#%E6%8F%92%E4%BB%B6-plugins-</a></p><ul><li><p>entry</p></li><li><p>output</p></li><li><p>loader</p></li><li><p>plugins</p></li><li><p>mode</p></li><li><p>resolve <a href="https://webpack.js.org/configuration/resolve/#root" target="_blank" rel="noopener">https://webpack.js.org/configuration/resolve/#root</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">resolve:&#123;</span><br><span class="line">  alias: &#123; <span class="comment">// 别名，  import a from './src/utils/a.js' 简写 import a from 'utils/a.js'</span></span><br><span class="line">    utils: path.resolve(__dirname, <span class="string">'src/utils/'</span>),</span><br><span class="line">    Templates: path.resolve(__dirname, <span class="string">'src/templates/'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">extensions: [<span class="string">'.js'</span>, <span class="string">'.vue'</span>, <span class="string">'.css'</span>, <span class="string">'.json'</span>] <span class="comment">// 引入文件时候没有后缀名会按照这个次序去找</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="开发服务器配置-webpack-dev-server"><a href="#开发服务器配置-webpack-dev-server" class="headerlink" title="开发服务器配置 webpack-dev-server"></a>开发服务器配置 webpack-dev-server</h3><p>​ 原理：启动了一个 express 的静态服务</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//更多配置 https://webpack.js.org/configuration/dev-server/</span></span><br><span class="line">devServer:&#123;</span><br><span class="line">port:<span class="number">3000</span>, <span class="comment">//默认是8080</span></span><br><span class="line">  progress:<span class="literal">true</span>,</span><br><span class="line">  contentBase:<span class="string">'./build'</span>,  <span class="comment">//以这个文件作为目录去启动静态服务</span></span><br><span class="line">  proxy: &#123; <span class="comment">//接口的代理设置</span></span><br><span class="line">    <span class="string">'/api'</span>: &#123;</span><br><span class="line">      target: <span class="string">'http://localhost:3000'</span>,</span><br><span class="line">        pathRewrite: &#123;<span class="string">'^/api'</span> : <span class="string">''</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用插件 htmlwebpackPlugin 去自动引用模版</p><h3 id="htmlwebpackPlugin"><a href="#htmlwebpackPlugin" class="headerlink" title="htmlwebpackPlugin"></a>htmlwebpackPlugin</h3><ul><li><p><a href="https://webpack.js.org/plugins/html-webpack-plugin/#root" target="_blank" rel="noopener">https://webpack.js.org/plugins/html-webpack-plugin/#root</a></p></li><li><p>配置 ：<a href="https://github.com/jantimon/html-webpack-plugin#options" target="_blank" rel="noopener">https://github.com/jantimon/html-webpack-plugin#options</a></p></li><li>基本使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> HtmlWebpacklugin(&#123;</span><br><span class="line">  template: <span class="string">"./src/index.html"</span>,</span><br><span class="line">  filename: <span class="string">"index.html"</span>, <span class="comment">//输出后的文件名</span></span><br><span class="line">  minify: &#123;</span><br><span class="line">    <span class="comment">// 在 mode:'production', 时候压缩html配置</span></span><br><span class="line">    removeAttributeQuotes: <span class="literal">true</span>, <span class="comment">//双引号</span></span><br><span class="line">    collapseInlineTagWhitespace: <span class="literal">true</span> <span class="comment">//压缩成一行</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="loader-非-js-文件的处理-高级-js-语法转化"><a href="#loader-非-js-文件的处理-高级-js-语法转化" class="headerlink" title="loader 非 js 文件的处理 , 高级 js 语法转化"></a>loader 非 js 文件的处理 , 高级 js 语法转化</h3><h4 id="css-处理"><a href="#css-处理" class="headerlink" title="css 处理"></a>css 处理</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//loder的解析</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>:&#123; <span class="comment">//  模块</span></span><br><span class="line">  rules:[ <span class="comment">//规则 css-loader 接续 @import这种语法</span></span><br><span class="line">  <span class="comment">// style-loader 把css插入到head的标签中</span></span><br><span class="line">  <span class="comment">//loader 特点: 功能单一； 用法 ：一个loader用字符串，多个[]；顺序：默认从右往左</span></span><br><span class="line">&#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">"style-loader"</span>, <span class="attr">options</span>: &#123; <span class="attr">insertAt</span>: <span class="string">"top"</span> &#125; &#125;, <span class="comment">//传对象这样写， inserAt css插入的位置</span></span><br><span class="line">          <span class="string">"css-loader"</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mini-css-extract-plugin 的单独打包</span></span><br><span class="line"><span class="comment">// https://webpack.js.org/plugins/mini-css-extract-plugin/#root</span></span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">    filename: <span class="string">'main.css'</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">],</span><br><span class="line"><span class="built_in">module</span>:&#123;</span><br><span class="line">rules:[</span><br><span class="line">    &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">MiniCssExtractPlugin.loader,</span><br><span class="line">          <span class="string">'css-loader'</span>,</span><br><span class="line"><span class="string">'postcss-loader'</span><span class="comment">//浏览器前缀 postcss-loader ,autoprefixer</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打包后css压缩，optimize-css-assets-webpack-plugin, js压缩是 mode :"production" //https://www.npmjs.com/package/optimize-css-assets-webpack-plugin</span></span><br><span class="line">plugins:  [</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">new</span> optimizeCss(&#123;&#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="es6-转-es5"><a href="#es6-转-es5" class="headerlink" title="es6 转 es5"></a>es6 转 es5</h4><p>babel-loader</p><p>@babel/core : babel 的核心方法，可以调用 transform</p><p>@babel/preset-env ：如何转化 es6=》es5 （ 按需编译和按需打补丁）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">    use: &#123;</span><br><span class="line">      loader: <span class="string">"babel-loader"</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          <span class="comment">// 用babel-loader 把es6-es5</span></span><br><span class="line">          presets: [<span class="string">"@babel/preset-env"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  include:path.resolve(__dirname,<span class="string">'src'</span>),</span><br><span class="line">  exclude:<span class="regexp">/node_modules/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>//其他插件可以去 babel 官网查看</p><p>@babel/plugin-transform-runtime：是对 Babel 编译过程中产生的 helper 方法进行重新利用(聚合)，以达到减少打包体积的目的。此外还有个作用是为了避免全局补丁污染，对打包过的 bunler 提供”沙箱”式的补丁。配合产线的 @babel/runtime （放生产包，安装不要加 —D）</p><p>polyfill(弃用)：core-js + regenerator</p><p>core-js：实现 JavaScript 标准运行库之一，它提供了从 ES3 ～ ES7+ 以及还处在提案阶段的 JavaScript 的实现</p><p><a href="https://juejin.im/post/5cb9833b6fb9a068a84fe4d0#heading-27" target="_blank" rel="noopener">babel 社区介绍</a></p><h4 id="esLint-代码规范引用"><a href="#esLint-代码规范引用" class="headerlink" title="esLint 代码规范引用"></a>esLint 代码规范引用</h4><p>安装 eslint, aslant-loader</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">rules: [</span><br><span class="line">  &#123;</span><br><span class="line">    test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">    use: &#123;</span><br><span class="line">      loader: <span class="string">"eslint-loader"</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        enforce: <span class="string">"pre"</span> <span class="comment">// loader默认从右到左，下到上， pre:提前执行， post：往后</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h4 id="图片处理"><a href="#图片处理" class="headerlink" title="图片处理"></a>图片处理</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 三种 打包图片</span></span><br><span class="line"><span class="comment">// 1)在js中创建图片</span></span><br><span class="line"><span class="keyword">import</span> image <span class="keyword">from</span> <span class="string">"./image.jpg"</span>; <span class="comment">//引入图片，返回一个新地址 （file-loader）为了可以根据图片大小把图片编译成base64 所以用url-loader</span></span><br><span class="line"><span class="keyword">let</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.src = image;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(img);</span><br><span class="line"></span><br><span class="line"><span class="comment">//webpack.config中配置</span></span><br><span class="line">&#123;</span><br><span class="line"> test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">   <span class="comment">// 做一个限制，图片小于 多少k时候，用base64来转化，其他用真实图片</span></span><br><span class="line">   <span class="comment">// 否则用file-loader产生真实图片</span></span><br><span class="line">   use: &#123;</span><br><span class="line">     loader: <span class="string">"url-loader"</span>,</span><br><span class="line">       options: &#123;</span><br><span class="line">         limit: <span class="number">10</span> * <span class="number">1024</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2）在css引入background（'url'） // css-loader会操作</span></span><br><span class="line">background-image: url(<span class="string">"./image.jpg"</span>);</span><br><span class="line"><span class="comment">// 3) &lt;img src="./image.jpg" /img&gt; //使用html-withimg-loader 注意 HtmlWebpacklugin 中的 minify配置就不能使用了,目前打包的时候 src 后面打包成对象了，还是有问题</span></span><br><span class="line">&#123;</span><br><span class="line"> test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">   use: <span class="string">"html-withimg-loader"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>1） expose-loader 暴露到 window 上</p><p>2)providePlugin 给每个人提供一个\$</p><p>场景：在模块中不用引入 jqury 包就可以使用\$</p><p>webpack 配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"><span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">  $: <span class="string">"jquery"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li>引入不打包 cdn 在 html 中引入</li></ol><h3 id="文件分类"><a href="#文件分类" class="headerlink" title="文件分类"></a>文件分类</h3><p>在 mode:”production”，其他不要加</p><ol><li>图片</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">    <span class="comment">// 做一个限制，图片小于 多少k时候，用base64来转化</span></span><br><span class="line">    <span class="comment">// 否则用file-loader产生真实图片</span></span><br><span class="line">    use: &#123;</span><br><span class="line">      loader: <span class="string">"url-loader"</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          limit: <span class="number">10</span> * <span class="number">1024</span>,</span><br><span class="line">            outputPath:<span class="string">'img/'</span> <span class="comment">//打包路径</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>2） css</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> miniCssExtractPlugiin(&#123;</span><br><span class="line">      filename: <span class="string">"css/main.css"</span></span><br><span class="line">    &#125;),</span><br></pre></td></tr></table></figure><ol start="3"><li>cdn 资源引入</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"dist"</span>),</span><br><span class="line">    filename: <span class="string">"output[hash:8].js"</span>, <span class="comment">//使用hash值  "output[hash:8].js"</span></span><br><span class="line">    publicPath:<span class="string">'http://www.pszh.com'</span>, <span class="comment">//给打包后的js,css,image图片都加上cdn路径</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 如果只想给图片添加</span></span><br><span class="line">  &#123;</span><br><span class="line">    test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">      <span class="comment">// 做一个限制，图片小于 多少k时候，用base64来转化</span></span><br><span class="line">      <span class="comment">// 否则用file-loader产生真实图片</span></span><br><span class="line">      use: &#123;</span><br><span class="line">        loader: <span class="string">"url-loader"</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            limit: <span class="number">10</span> * <span class="number">1024</span>,</span><br><span class="line">              outputPath:<span class="string">'img/'</span>, <span class="comment">//打包路径</span></span><br><span class="line">              publicPath:<span class="string">'http://www.pszh.com'</span>,</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h2 id="配置篇"><a href="#配置篇" class="headerlink" title="配置篇"></a>配置篇</h2><h3 id="打包多页应用"><a href="#打包多页应用" class="headerlink" title="打包多页应用"></a>打包多页应用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line">   home: <span class="string">"./src/home.js"</span>,</span><br><span class="line">   other: <span class="string">"./src/other.js"</span></span><br><span class="line"> &#125;,</span><br><span class="line"> output: &#123;</span><br><span class="line">   <span class="comment">//[name]表示变量 home ,other. entry的key值</span></span><br><span class="line">   filename: <span class="string">"[name].js"</span>,</span><br><span class="line">   path: path.resolve(__dirname, <span class="string">"dist"</span>)</span><br><span class="line"> &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//打包出两个html文件</span></span><br><span class="line">  plugins: [</span><br><span class="line">     <span class="keyword">new</span> htmlwebpackPlugin(&#123;</span><br><span class="line">       template: <span class="string">"./src/index.html"</span>,</span><br><span class="line">       filename: <span class="string">"home.html"</span>,</span><br><span class="line">       <span class="comment">//为了打包的时候只打包home.js进去</span></span><br><span class="line">       chunks: [<span class="string">"home"</span>]</span><br><span class="line">     &#125;),</span><br><span class="line">     <span class="keyword">new</span> htmlwebpackPlugin(&#123;</span><br><span class="line">       template: <span class="string">"./src/index.html"</span>,</span><br><span class="line">       filename: <span class="string">"other.html"</span>,</span><br><span class="line">       <span class="comment">//为了打包的时候把home.js，other.js都打进去</span></span><br><span class="line">       chunks: [<span class="string">"home"</span>, <span class="string">"other"</span>]</span><br><span class="line">     &#125;)</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure><h3 id="配置-source-map"><a href="#配置-source-map" class="headerlink" title="配置 source-map"></a>配置 source-map</h3><p>​ 源码映射</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1)源码映射， 单独生成一个.map文件，出错会定位到报错的行和列   文件大且全</span></span><br><span class="line"> <span class="comment">//devtool: "source-map",</span></span><br><span class="line"> <span class="comment">// 2) 不会生产单独文件，可以显示行和列</span></span><br><span class="line"> devtool: <span class="string">"eval-source-map"</span>,</span><br><span class="line"> <span class="comment">//3) 不会产生列，但是是一个单独映射文件</span></span><br><span class="line"> <span class="comment">// devtool: "cheap-module-source-map", //产生后保留起来</span></span><br><span class="line"> <span class="comment">// // 4) 不会生成文件， 继承后可以在文件中，不会产生列</span></span><br><span class="line"> <span class="comment">// devtool: "cheap-module-eval-source-map",</span></span><br></pre></td></tr></table></figure><h3 id="watch-用法"><a href="#watch-用法" class="headerlink" title="watch 用法"></a>watch 用法</h3><p>​ 修改代码，实时打包。编译</p><p>​ webpack-dev-server：默认 watch 开启，为 true，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">watch: <span class="literal">true</span>,</span><br><span class="line">watchOptions: &#123;</span><br><span class="line">  poll: <span class="number">1000</span>, <span class="comment">// 每秒检测多少次改变</span></span><br><span class="line">  aggregateTimeout: <span class="number">500</span>, <span class="comment">// 防抖 毫秒之后在执行</span></span><br><span class="line">  ignored: <span class="regexp">/node_modules/</span> <span class="comment">//忽略文件</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="小插件应用"><a href="#小插件应用" class="headerlink" title="小插件应用"></a>小插件应用</h3><h4 id="clean-webpack-plugin-清空之前的打包目录文件"><a href="#clean-webpack-plugin-清空之前的打包目录文件" class="headerlink" title="clean-webpack-plugin :清空之前的打包目录文件"></a>clean-webpack-plugin :清空之前的打包目录文件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">"clean-webpack-plugin"</span>);</span><br><span class="line"><span class="keyword">new</span> CleanWebpackPlugin();</span><br><span class="line"><span class="comment">// new CleanWebpackPlugin("./dist")</span></span><br></pre></td></tr></table></figure><h4 id="copy-webpack-plugin-：指定目录下的文件打包到-dist-文件下-，如-public"><a href="#copy-webpack-plugin-：指定目录下的文件打包到-dist-文件下-，如-public" class="headerlink" title="copy-webpack-plugin ：指定目录下的文件打包到 dist 文件下 ，如 public"></a>copy-webpack-plugin ：指定目录下的文件打包到 dist 文件下 ，如 public</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> copyWebpackPlugin = <span class="built_in">require</span>(<span class="string">"copy-webpack-plugin"</span>);</span><br><span class="line"><span class="keyword">new</span> copyWebpackPlugin([&#123; <span class="attr">from</span>: <span class="string">"./public"</span>, <span class="attr">to</span>: <span class="string">"./"</span> &#125;]); <span class="comment">//把public目录中的文件copy到dist下，</span></span><br><span class="line"><span class="comment">// new copyWebpackPlugin([&#123; from: "./public", to: "./public" &#125;]) //把public目录中的文件copy到dist下的public文件夹下，</span></span><br></pre></td></tr></table></figure><h3 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1）</span></span><br><span class="line">devServer: &#123;</span><br><span class="line"> proxy: &#123;</span><br><span class="line">   <span class="string">'/api'</span>: &#123;</span><br><span class="line">     target: <span class="string">"http://localhost:3000"</span>, <span class="comment">// 遇到 ‘/api’的代理到这个host上</span></span><br><span class="line">     pathRewrite: &#123; <span class="string">"/api"</span>: <span class="string">""</span> &#125; <span class="comment">//重写，把请求路径中的/api=&gt; ''</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// //2） mock数据的 webpack-server-dev就是一个express服务，所以</span></span><br><span class="line">    <span class="comment">// before(app) &#123;</span></span><br><span class="line">    <span class="comment">//   app.get("/user", (req, res) =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//     res.json(&#123; name: "change All" &#125;);</span></span><br><span class="line">    <span class="comment">//   &#125;);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3)通过在express node服务上直接启动webpack, 端口用的就是webpack的端口  express的中间件  webpack-dev-middleware</span></span><br></pre></td></tr></table></figure><h2 id="优化篇"><a href="#优化篇" class="headerlink" title="优化篇"></a>优化篇</h2><ol><li><p>noparse :打包时候不用在继续查找依赖看他是否有依赖</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    noParse: <span class="regexp">/jquery|lodash/</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><p>2) rules:中 exclude,include</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      include: path.resolve(<span class="string">"src"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>3) IgnorePlugin :导入模块中多余模块的剔除</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如moment引入了很多语言包，先去掉所有的语言包</span></span><br><span class="line">plugins:[</span><br><span class="line"><span class="keyword">new</span> webpack.IgnorePlugin(<span class="regexp">/\.\/locale/</span>, /moment/);</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">//然后在使用的地方要手动引入语言</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'moment/locale/zh-cn'</span>;</span><br><span class="line">moment.locale(<span class="string">'zh-cn'</span>);</span><br></pre></td></tr></table></figure><ol start="4"><li><p>dllPlugin ==》 DllReferencePlugin: 拆分</p></li><li><p>happypack 多线程打包 //项目小不要用，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> happypack = <span class="built_in">require</span>(<span class="string">'happypack'</span>)</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="built_in">module</span>:&#123;</span><br><span class="line">  rules:[</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        include: path.resolve(__dirname, <span class="string">"src"</span>),</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: <span class="string">'happypack/loader?id=js'</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: <span class="string">'happypack/loader?id=css'</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">plugins:[</span><br><span class="line">  <span class="keyword">new</span> happypack(&#123;</span><br><span class="line">    id:<span class="string">'js'</span>,</span><br><span class="line">use:[</span><br><span class="line">      &#123;</span><br><span class="line">        loader:<span class="string">'babel-loader'</span>,</span><br><span class="line">        options:&#123;</span><br><span class="line">           <span class="comment">// 用babel-loader 把es6-es5</span></span><br><span class="line">            presets: [<span class="string">"@babel/preset-env"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">new</span> happypack(&#123;</span><br><span class="line">    id:<span class="string">'css'</span>,</span><br><span class="line">use:[</span><br><span class="line">      &#123;</span><br><span class="line">        loader:<span class="string">'style-loader,css-loader'</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>抽离公共代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">optimization:&#123;</span><br><span class="line">splitChunks:&#123; // 分割代码块</span><br><span class="line">cacheGroups:&#123; // 缓存组</span><br><span class="line"></span><br><span class="line">common:&#123; //公共的模块 的抽离</span><br><span class="line">chunks:&apos;initial&apos;,// 开始入口的时候抽离 ，</span><br><span class="line">minSize:1, // 文件大小大于多少字节抽离，</span><br><span class="line">minChunks:3 // 使用次数大于多少时候抽离</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">vendor:&#123; //第三方模块的抽离</span><br><span class="line">priority:1, // 提升优先级（公用模块应用了第三方东西）</span><br><span class="line">test:/node_modules/, // 把你抽离出来</span><br><span class="line">chunks:&apos;initial&apos;,</span><br><span class="line">minSize:1,</span><br><span class="line">minChunks:3</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>7) webpack 自带优化</p><ol><li><p>用 import 在生产模式下，会自动去掉没用的代码， tree-shaking: 把没用的代码，自动剔除 require 引入不行</p></li><li><p>scope hosting 作用域提升 ：在 webpack 中自动把一些代码简化了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> c = a + b; <span class="comment">//打包时候会直接c =3,上面的a，b去掉了</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//es6草案中的语法</span></span><br><span class="line"><span class="keyword">import</span>(<span class="string">"./utils//test.js"</span>).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data.default);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;webpack-基础篇&quot;&gt;&lt;a href=&quot;#webpack-基础篇&quot; class=&quot;headerlink&quot; title=&quot;webpack 基础篇&quot;&gt;&lt;/a&gt;webpack 基础篇&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;### 安装本地webpack
&lt;/code&gt;&lt;/p
      
    
    </summary>
    
      <category term="Web,打包工具" scheme="https://pszh.github.io/categories/Web-%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="webpack" scheme="https://pszh.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>React小白学习</title>
    <link href="https://pszh.github.io/2020/01/16/react%20%E5%B0%8F%E7%99%BD%E5%AD%A6%E4%B9%A0%E7%AF%87/"/>
    <id>https://pszh.github.io/2020/01/16/react 小白学习篇/</id>
    <published>2020-01-16T02:06:24.653Z</published>
    <updated>2020-01-16T02:06:24.654Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><p><strong>React.js</strong></p><p>React.js 是 React 的核心库，在应用中必须先加载核心库。</p></li><li><p><strong>ReactDOM.js</strong></p><p>ReactDOM.js 是 React 的 DOM 渲染器，React 将核心库和渲染器分离开了，为了在 web 页面中显示开发的组件，需要调用 ReactDOM.render 方法， 第一个参数是 React 组件，第二个参数为 HTMLElement</p></li><li><p><strong>JSX</strong></p><p><a herf="<https://segmentfault.com/a/1190000005145610>">JSX 是 React 自定义的语法，最终 JSX 会转化为 JS 运行于页面当中。</a></p></li><li><p><strong>组件</strong></p><p><a href="https://segmentfault.com/a/1190000005161417" target="_blank" rel="noopener">组件是 React 中的核心概念，页面当中的所有元素都是通过 React 组件来表达， 我们将要写的 React 代码绝大部分都是在做 React 组件的开发 </a></p></li><li><p><strong>VIRTUAL DOM</strong></p><p>React 抽象出来的虚拟 DOM 树 （其实就是内存中的一个<strong>js 对象</strong>），虚拟树是 React 高性能的关键。</p></li><li><p><strong>单向数据流：one-way reactive data flow</strong></p><p>React 应用的核心设计模式，数据流向自顶向下</p><h3 id="react-工作原理"><a href="#react-工作原理" class="headerlink" title="react 工作原理"></a>react 工作原理</h3><ol><li>state,props 数据</li><li>jsx 模版</li><li>数据+ 模版 生成虚拟 DOM(就是一个 js 对象，用来描述真实 DOM) eg: { ‘div’, { id : ‘abc’ }, [‘span’,{},’hello’]}</li><li>用虚拟 DOM 结构生成真实 DOM,来显示 eg : <div id="abc"><span>hello</span></div></li><li>state 发生变化</li><li>数据+模版 生成 <strong>新的</strong> 虚拟 DOM eg : { ‘div’, { id : ‘abc’ }, [‘span’,{},’bye’]}</li><li>比较原始虚拟 DOM 和新虚拟 DOM 的区别 (用到 diff 算法，同层比对)，找到区别 eg: span 中内容</li><li>直接操作 DOM, eg : 改变 span 中内容</li></ol></li></ul><h2 id="组件生命周期"><a href="#组件生命周期" class="headerlink" title="组件生命周期"></a>组件生命周期</h2><p>​ <a href="https://raw.githubusercontent.com/pszh/webLearn/master/有道图片/react组件生命周期.png" target="_blank" rel="noopener">https://raw.githubusercontent.com/pszh/webLearn/master/%E6%9C%89%E9%81%93%E5%9B%BE%E7%89%87/react%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png</a></p><h3 id="componentWillMount"><a href="#componentWillMount" class="headerlink" title="componentWillMount"></a>componentWillMount</h3><ul><li><strong>条件</strong>：第一次渲染阶段在调用 render 方法前会被调用</li><li><strong>作用</strong>：该方法在整个组件生命周期只会被调用一次，所以可以利用该方法做一些组件内部的初始化工作</li></ul><h3 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount"></a>componentDidMount</h3><ul><li><strong>条件</strong>：第一次渲染成功过后，组件对应的 DOM 已经添加到页面后调用</li><li><strong>作用</strong>：此时组件对应的 DOM 已经存在，我们可以在这个时候做一些依赖 DOM 的操作或者其他的一些如请求数据，和第三方库整合的操作。如果嵌套了子组件，子组件会比父组件优先渲染，所以这个时候可以获取子组件对应的 DOM</li></ul><h3 id="componentWillReceiveProps-newProps"><a href="#componentWillReceiveProps-newProps" class="headerlink" title="componentWillReceiveProps(newProps)"></a>componentWillReceiveProps(newProps)</h3><ul><li><strong>条件</strong>：当组件获取新属性的时候，第一次渲染不会调用</li><li><strong>作用</strong>：这个时候可以根据新的属性来修改组件状态</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">componentWillReceiveProps: <span class="function"><span class="keyword">function</span>(<span class="params">nextProps</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">  isShow: nextProps.likeCount &gt; <span class="keyword">this</span>.props.likeCount</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>：这个时候虽说是获取新属性，但并不能确定属性一定改变了，例如一个组件被多次渲染到 DOM 中</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">eg:<span class="keyword">var</span> Component = React.createClass(&#123;</span><br><span class="line">        componentWillReceiveProps: <span class="function"><span class="keyword">function</span>(<span class="params">nextProps</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'componentWillReceiveProps'</span>, nextProps.data.bar);</span><br><span class="line">        &#125;,</span><br><span class="line">        rener: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &lt;div&gt; &#123;this.props.data.bar&#125; &lt;/div&gt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>);</span><br><span class="line">    <span class="keyword">var</span> mydata = &#123;<span class="attr">bar</span>: <span class="string">'drinks'</span>&#125;;</span><br><span class="line">    ReactDOM.render(&lt;Component data=&#123;mydata&#125; /&gt;, container);</span><br><span class="line">    ReactDOM.render(&lt;Component data=&#123;mydata&#125; /&gt;, container);</span><br><span class="line">    ReactDOM.render(&lt;Component data=&#123;mydata&#125; /&gt;, container);</span><br><span class="line">    结果会输出两次 componentWillReceiveProps，虽然属性数据没有改变，但是仍然会调用 componentWillReceiveProps 方法。</span><br></pre></td></tr></table></figure><h3 id="shouldComponentUpdate-nextProps-nextState"><a href="#shouldComponentUpdate-nextProps-nextState" class="headerlink" title="shouldComponentUpdate(nextProps, nextState)"></a>shouldComponentUpdate(nextProps, nextState)</h3><ul><li><strong>条件</strong>：接收到新属性或者新状态的时候在 render 前会被调用（除了调用 forceUpdate 和初始化渲染以外）</li><li><strong>作用</strong>：该方法让我们有机会决定是否重渲染组件，如果返回 false，那么不会重渲染组件，借此可以优化应用性能</li></ul><h3 id="componentWillUpdate-nextProps-nextState"><a href="#componentWillUpdate-nextProps-nextState" class="headerlink" title="componentWillUpdate(nextProps, nextState)"></a>componentWillUpdate(nextProps, nextState)</h3><ul><li><strong>条件</strong>：当组件确定要更新，在 render 之前调用</li><li><strong>作用</strong>：这个时候可以确定一定会更新组件，可以执行更新前的操作</li><li><strong>注意</strong>：方法中<strong><em>不能使用 setState</em></strong> ，setState 的操作应该在 componentWillReceiveProps 方法中调用</li></ul><h3 id="componentDidUpdate-prevProps-prevState"><a href="#componentDidUpdate-prevProps-prevState" class="headerlink" title="componentDidUpdate(prevProps, prevState)"></a>componentDidUpdate(prevProps, prevState)</h3><ul><li><strong>条件</strong>：更新被应用到 DOM 之后</li><li><strong>作用</strong>： 可以执行组件更新过后的操作</li></ul><p>​</p><h2 id="React-与-DOM"><a href="#React-与-DOM" class="headerlink" title="React 与 DOM"></a>React 与 DOM</h2><h3 id="获取-DOM-元素"><a href="#获取-DOM-元素" class="headerlink" title="获取 DOM 元素"></a>获取 DOM 元素</h3><p>从组件的生命周期中，Dom 真正添加到 html 中 hook 是，</p><ul><li><em>componentDidMount</em></li><li><em>componentDidUpdate</em></li></ul><p>这两个函数中可以获取到，react 提供了两种获取方式</p><ol><li><p><strong>findDOMNode()</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyComponent = React.createClass(&#123;</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;div&gt; .... &lt;/div&gt;;</span><br><span class="line">  &#125;,</span><br><span class="line">  componentDidMount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $root = ReactDOM.findDOMNode(<span class="keyword">this</span>);</span><br><span class="line">    <span class="built_in">console</span>.log($root);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：此方法不能用到无状态组件上，且只能获取到 root 元素，（如果 dom 多层级，获取子级元素需要 refs）</p></li><li><p><strong>Refs</strong></p><p>每个组件都有 this.refs 属性，</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyComponent = React.createClass(&#123;</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button ref=<span class="string">"btn"</span>&gt;...&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;a href="" ref="link"&gt;&lt;/</span>a&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  componentDidMount: function() &#123;</span></span><br><span class="line"><span class="regexp">    var $btn = this.refs.btn;</span></span><br><span class="line"><span class="regexp">    var $link = this.refs.link;</span></span><br><span class="line"><span class="regexp">    console.log($btn, $link);</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h2><p><strong>redux 的引入</strong>：不同组件之间的通讯时 由于 <strong>层级太深</strong> 导致麻烦， 所以引入 redux 的 Store 统一管理</p><p>redux = flux + reducers</p><h3 id="redux-的工作流"><a href="#redux-的工作流" class="headerlink" title="redux 的工作流"></a>redux 的工作流</h3><p><a href="https://github.com/pszh/webLearn/blob/master/有道图片/redux 工作流程.png" target="_blank" rel="noopener">https://github.com/pszh/webLearn/blob/master/%E6%9C%89%E9%81%93%E5%9B%BE%E7%89%87/redux%20%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png</a></p><p><strong>描述</strong> ：</p><ol><li><p>组件通过 dispatch 发起 action</p><ol start="2"><li>store 把之前的数据 state 和 actions 转发给 reducers</li><li>reducers 根据 actions.type 操作 state，并返回新 state 到 store 中</li><li>store 把 新 state 替换老 state</li><li>store 发生改变 组件 会感知到改变，然后 setState <em>( 组件要注册 store.subscribe()监听)</em></li></ol></li></ol><h3 id="代码中使用"><a href="#代码中使用" class="headerlink" title="代码中使用"></a>代码中使用</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install redux —save</span><br></pre></td></tr></table></figure><h3 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h3><ol><li><p>src 下建 store 文件夹 =》 index.js state 中心</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">"redux"</span>;</span><br><span class="line"><span class="comment">//第二步创建的</span></span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">"./reducer.js"</span>;</span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure></li><li><p>store =&gt; reducer.js state 操作，管理中心</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认初始化的state 状态</span></span><br><span class="line"><span class="keyword">const</span> defaultState = &#123;</span><br><span class="line">  inputValue: <span class="string">""</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (state = defaultState, action) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"changeInputValue"</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        inputValue: action.value</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> state;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>组件中引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  store form <span class="string">'./store'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件的 constructor 构造方法中</span></span><br><span class="line"><span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">  <span class="keyword">super</span>(props);</span><br><span class="line">  <span class="keyword">this</span>.handleInputChange = <span class="keyword">this</span>.handleInputChange.bind(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.handleStoreChange = <span class="keyword">this</span>.handleStoreChange.bind(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.state = store.getState();</span><br><span class="line">  <span class="comment">//订阅store的改变 dispacth之后store改变</span></span><br><span class="line">  store.subscribe(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(store.getState());</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发起action</span></span><br><span class="line">handleInputChange(value)&#123;</span><br><span class="line">  <span class="keyword">const</span> actions = &#123;</span><br><span class="line">    type : <span class="string">'changeInputValue'</span>,</span><br><span class="line">    value: value</span><br><span class="line">  &#125;</span><br><span class="line">  store.dispatch(actions);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="opt"><a href="#opt" class="headerlink" title="opt :"></a><strong>opt</strong> :</h3><ol><li><p>这个里面的 actions.type 可以统一管理， 在 src/store 建一个 actionsTypes.js 文件，然后去引用对应变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> CHANGE_INPUT_VALUE = <span class="string">"changeInputValue"</span>;</span><br></pre></td></tr></table></figure></li><li><p>actions 在 组建中去创建太过分散，统一管理 ，在 src/store 建一个 actionsCreator.js 文件，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; CHANGE_INPUT_VALUE &#125; <span class="keyword">from</span> <span class="string">"./actionTypes"</span>;</span><br><span class="line"><span class="comment">//对应组件中使用这个去创建对应action</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getInputChangeAction = <span class="function"><span class="params">value</span> =&gt;</span> (&#123;</span><br><span class="line">  type: CHANGE_INPUT_VALUE,</span><br><span class="line">  value</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>//组件中的 handleInputChange<br>handleInputChange(value){<br>  const actions = getInputChangeAction(value)<br>  store.dispatch(actions);<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**注意** ：</span><br><span class="line"></span><br><span class="line">- store 是唯一的 （整个项目就一个 createStore()）</span><br><span class="line">- 只有 store 才能改变 (reducer 中返回的 state 也是给到 store 中改变 state 的)</span><br><span class="line">- reducer 函数必须是纯函数，（固定输入，就有固定输出，不能有异步操作等，）</span><br><span class="line"></span><br><span class="line">复习：四个函数 createStore() ; getState() ; dispatch() ; subscribe()</span><br><span class="line"></span><br><span class="line">### redux 异步操作 redux—thunk</span><br><span class="line"></span><br><span class="line">- **原理**：可以让 actions 是一个函数，</span><br><span class="line"></span><br><span class="line">- **安装**：npm install redux-thunk —save</span><br><span class="line"></span><br><span class="line">- **引入**：src/store/index.js</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">import &#123; createStore,applyMiddleware, compose &#125; from &apos;redux&apos;;</span><br><span class="line">import thunk from &apos;redux-thunk&apos;;</span><br><span class="line">//第二步创建的</span><br><span class="line">import reducer from &apos;./reducer.js&apos;;</span><br><span class="line"></span><br><span class="line">// 下面两个为了使用redux-devtools这个浏览器插件</span><br><span class="line">const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;</span><br><span class="line">const enhancer = composeEnhancers(</span><br><span class="line">applyMiddleware(thunk),</span><br><span class="line">);</span><br><span class="line">const  store = createStore( reducer,enhancer );</span><br><span class="line">//不使用浏览器插件的话</span><br><span class="line">//const  store = createStore( reducer, applyMiddleware(thunk) );</span><br><span class="line">export default store;</span><br></pre></td></tr></table></figure></li></ol></li></ol><ul><li><strong>使用</strong>：src/store/actionCreators.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; CHANGE_INPUT_VALUE, GET_HTTP_DATA &#125; <span class="keyword">from</span> <span class="string">"./actionTypes"</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span>;</span><br><span class="line"><span class="comment">//普通的 action</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getInputChangeAction = <span class="function"><span class="params">value</span> =&gt;</span> (&#123;</span><br><span class="line">  type: CHANGE_INPUT_VALUE,</span><br><span class="line">  value</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//异步action</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getHttpData = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dispatch, getState</span>) =&gt;</span> &#123;</span><br><span class="line">    axios.get(<span class="string">"/list.json"</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> data = res.data;</span><br><span class="line">      <span class="comment">//调用一个普通action 去reducer</span></span><br><span class="line">      <span class="keyword">const</span> action = getInputChangeAction(data);</span><br><span class="line">      dispatch(action);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//组件里面需要掉用的是</span></span><br><span class="line">store.disPatch(getHttpData());</span><br></pre></td></tr></table></figure><h3 id="redux-异步操作-redux—saga"><a href="#redux-异步操作-redux—saga" class="headerlink" title="redux 异步操作 redux—saga"></a>redux 异步操作 redux—saga</h3><ul><li><strong>原理</strong>：通过捕获，拦截对应的 action，然后调用自己的（异步）方法， 这个方法中再去发起另一个 aciotns 出发 reducer</li><li><strong>安装</strong>：npm install redux—saga —save</li><li><p><strong>引入</strong>：src/store/index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware, compose &#125; <span class="keyword">from</span> <span class="string">"redux"</span>;</span><br><span class="line"><span class="keyword">import</span> createSagaMiddleware <span class="keyword">from</span> <span class="string">"redux-saga"</span>;</span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">"./reducer.js"</span>;</span><br><span class="line"><span class="comment">//异步操作的集合</span></span><br><span class="line"><span class="keyword">import</span> Sagas <span class="keyword">from</span> <span class="string">"./sagas"</span>;</span><br><span class="line"><span class="comment">// create the saga middleware</span></span><br><span class="line"><span class="keyword">const</span> sagaMiddleware = createSagaMiddleware();</span><br><span class="line"><span class="comment">// mount it on the store</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer, applyMiddleware(sagaMiddleware));</span><br><span class="line"><span class="comment">// run the saga</span></span><br><span class="line">sagaMiddleware.run(Sagas);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure></li></ul><p>src/store/sagas.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; takeEvery, put &#125; <span class="keyword">from</span> <span class="string">'redux-saga/effects'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CHANGE_INPUT_VALUE, GET_HTTP_DATA &#125; <span class="keyword">from</span> <span class="string">'./actionTypes'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getInputChangeAction &#125; form <span class="string">'./actionCreators'</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">getHttpData</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">yield</span> axios.get(<span class="string">'/list.json'</span>);</span><br><span class="line">  <span class="comment">// 发起一个新actions 出发reducer</span></span><br><span class="line">  <span class="keyword">const</span> actions = getInputChangeAction(res.data);</span><br><span class="line">  <span class="comment">// 不是用dispatch 了</span></span><br><span class="line">  <span class="keyword">yield</span> put( actions );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// generator 函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">Sagas</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 拦截到 action.type = GET_HTTP_DATA, 调用getHttpData函数</span></span><br><span class="line">  <span class="keyword">yield</span> takeEvery(GET_HTTP_DATA,getHttpData)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Sagas;</span><br></pre></td></tr></table></figure><ul><li><p><strong>使用</strong>：组件中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch(&#123; <span class="attr">type</span>: GET_HTTP_DATA &#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="React-redux"><a href="#React-redux" class="headerlink" title="React-redux"></a>React-redux</h3><ul><li><p><strong>简介</strong> ：<a href="https://react-redux.js.org/introduction/quick-start" target="_blank" rel="noopener">第三方模块，更方便的在 react 组件中使用 redux</a></p></li><li><p><strong>安装</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install react-redux</span><br></pre></td></tr></table></figure></li><li><p><strong>使用</strong>：</p><ol><li><p>provider</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> TodoList <span class="keyword">from</span> <span class="string">"./TodoList"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">"./store"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = (</span><br><span class="line">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;TodoList /&gt;</span><br><span class="line">  &lt;<span class="regexp">/Provider&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const rootElement = document.getElementById("root");</span></span><br><span class="line"><span class="regexp">ReactDOM.render(App, rootElement);</span></span><br></pre></td></tr></table></figure></li><li><p>connect()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getInputChangeAction &#125; <span class="keyword">from</span> <span class="string">"./actionCreators"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoList</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;input</span><br><span class="line">            value=&#123;<span class="keyword">this</span>.props.inputValue&#125;</span><br><span class="line">            onChange=&#123;<span class="keyword">this</span>.props.handleInputChange&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**把store中的state转到组件的props**/</span></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    inputValue: state.inputValue</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/** store.dispatch, props**/</span></span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = <span class="function"><span class="params">dispatch</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    handleInputChange(e) &#123;</span><br><span class="line">      <span class="keyword">const</span> action = getInputChangeAction(e.target.value);</span><br><span class="line">      dispatch(action);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps, mapDispatchToProps)(TodoList);</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：Provider 提供了 store,里面的组件才可以使用 connect()</p></li></ol></li></ul><h3 id="OPT"><a href="#OPT" class="headerlink" title="OPT"></a>OPT</h3><p>​ 项目变大的时候所有的代码逻辑都放入到单个 reducer 函数中都将会让程序变得不可维护，所以需要拆分开</p><ol><li><p>查分到每一个组件的上面，每个组件上建立一个 store/reducer.js 文件，合并用到<strong>combineReducers</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//合并 reducer 代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="comment">// 拆分出来的reducer ,里面的写法和 之前的src/store/reducer.js 一样</span></span><br><span class="line"><span class="keyword">import</span> headerReducer form <span class="string">'../common/header/store/reducer'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> combineReducers(&#123;</span><br><span class="line">  header:  headerReducer</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个时候组件中的mapstateToprops 要用 state.header.*** 去赋值了</span></span><br></pre></td></tr></table></figure></li><li><p>数据的 state 有可能不小心被改变了，这个时候可以引入一个<a href="https://immutable-js.github.io/immutable-js/" target="_blank" rel="noopener"><strong>immutable 组件</strong></a>，然后用 redux-immutable 去统一数据格式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安装</span></span><br><span class="line">npm install immutable --save</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后是 reducer.js 文件</span></span><br><span class="line"><span class="keyword">import</span> &#123; fromJs &#125; <span class="keyword">from</span> <span class="string">'immutable'</span>;</span><br><span class="line"><span class="keyword">const</span> defaultState = fromJs(&#123;</span><br><span class="line">  inputValue:<span class="string">''</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (state = defaultState ,action ) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span>(action.type)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'changeInputValue'</span>:</span><br><span class="line">      <span class="comment">//设置值</span></span><br><span class="line">      <span class="keyword">return</span> state.set(<span class="string">'inputValue'</span>,action.value);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件中</span></span><br><span class="line">mapstateToprops=<span class="function">(<span class="params">state</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">  <span class="comment">//没有拆分 reducer 时</span></span><br><span class="line">    inputValue: state.get(<span class="string">'inputValue'</span>),</span><br><span class="line"><span class="comment">// 拆分reducer时 （前提引入react-immutable）</span></span><br><span class="line">    focuse: state.get(<span class="string">'header'</span>).get(<span class="string">'focuse'</span>),</span><br><span class="line">    <span class="comment">//或</span></span><br><span class="line">    focuse: state.getInt([<span class="string">'header'</span> , <span class="string">'focuse'</span>]),</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 安装 react-immutable</span></span><br><span class="line">npm install react-immutable</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件的reducer 中 (下面的引入改变)</span></span><br><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux-immutable'</span>;</span><br><span class="line"><span class="comment">// 拆分出来的reducer ,里面的写法和 之前的src/store/reducer.js 一样</span></span><br><span class="line"><span class="keyword">import</span> headerReducer form <span class="string">'../common/header/store/reducer'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> combineReducers(&#123;</span><br><span class="line">  header:  headerReducer</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h2 id="react-router"><a href="#react-router" class="headerlink" title="react-router"></a>react-router</h2><pre><code>### 安装：</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm run react-router-dom</span><br><span class="line"><span class="comment">// react-router-dom 基于react-router，加入了在浏览器运行环境下的一些功能，例如：Link组件，会渲染一个a标签，Link组件源码a标签行; BrowserRouter和HashRouter组件，前者使用pushState和popState事件构建路由，后者使用window.location.hash和hashchange事件构建路由</span></span><br></pre></td></tr></table></figure><h3 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter, Route &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">"./store"</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">        &lt;BrowserRouter&gt;</span><br><span class="line">          &lt;div&gt;</span><br><span class="line">            &lt;Route path=<span class="string">"/"</span> exact render=&#123;() =&gt; &lt;div&gt; home &lt;/div&gt;&#125; /&gt;</span><br><span class="line">            &lt;Route path=<span class="string">"/detail"</span> exact render=&#123;() =&gt; &lt;div&gt; detail &lt;/div&gt;&#125; /&gt;</span><br><span class="line">          &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>BrowserRouter&gt;</span><br><span class="line">      &lt;<span class="regexp">/Provider&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="api-文档-："><a href="#api-文档-：" class="headerlink" title="api 文档 ："></a>api 文档 ：</h3><p><a href="https://blog.csdn.net/debbyDeng/article/details/84555817" target="_blank" rel="noopener">https://blog.csdn.net/debbyDeng/article/details/84555817</a></p><ul><li><p><strong>Route</strong>: 最重要的模块，主要职责是当 location 匹配路由时，会将 UI render 出来</p></li><li><p><strong>Link</strong>: 进入页面路由的链接</p></li><li><p><strong>Router</strong>: 所有路由组件最底层的接口，</p></li><li><p><strong>redirect</strong>:跳一个新路由，新 location 将覆盖 history stack 中的当前 location</p></li><li><p><strong>NavLink</strong>: link 的特殊版本，当匹配当前 url 时，会给当前 Link 添加样式</p></li><li><p><strong>prompt</strong>: 阻止用户跳转路由时的提示，配合 router 的 getUserConfirmation 使用</p></li></ul><p>-</p><ul><li><strong>MemoryTouter</strong>：把 url 保存在内存中，RN，测试等使用</li></ul><p>##</p><p>​</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;React.js&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;React.js 是 React 的核心
      
    
    </summary>
    
      <category term="Web" scheme="https://pszh.github.io/categories/Web/"/>
    
    
      <category term="React" scheme="https://pszh.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Node 常用命令 与版本控制</title>
    <link href="https://pszh.github.io/2019/01/18/node%20/"/>
    <id>https://pszh.github.io/2019/01/18/node /</id>
    <published>2019-01-18T02:15:09.203Z</published>
    <updated>2019-01-18T02:15:09.204Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Node-常用命令"><a href="#Node-常用命令" class="headerlink" title="Node 常用命令"></a>Node 常用命令</h3><p>清除 node_modules 文件 ：rm -rvf node_modules/</p><p>安装模块  </p><ol><li>全局安装 npm install -g n   （全局的 npm install -g n@..）</li><li>安装到项目中的depend :  npm install express </li><li>安装到项目devD  : npm install express –save-dev</li></ol><p>卸载模块：npm uninstall express</p><p>更新模块： npm update express</p><p>清本地缓存 ：npm cache clear</p><p>查看全局安装模块 ：npm list -g</p><h3 id="node-版本控制-n"><a href="#node-版本控制-n" class="headerlink" title="node 版本控制 n"></a>node 版本控制 n</h3><p>安装 </p><ol><li><p>通过npm安装 npm install -g n</p><ol start="2"><li>通过源代码</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/visionmedia/n.git</span><br><span class="line">$ cd n</span><br><span class="line">$ make install</span><br><span class="line">如果需要配置环境变量 在最后一条命令前加 PREFIX前缀</span><br><span class="line">$ PREFIX=$HOME make install #将n安装到~/bin/n</span><br></pre></td></tr></table></figure></li></ol><h4 id="使用和安装node"><a href="#使用和安装node" class="headerlink" title="使用和安装node"></a>使用和安装node</h4><ol><li><p>en安装制定版本   n 0.8.17    </p></li><li><p>卸载  sudo n - 0.8.17</p></li><li><p>切换版本 </p><p>  输入<code>n</code>来选择已经安装的node版本，或者通过<code>^C</code>取消选择 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ n</span><br><span class="line">    0.8.17</span><br><span class="line">  ο 0.10.26</span><br><span class="line">    0.11.12</span><br></pre></td></tr></table></figure></li><li><p>查看所有可安装版本 node ls   (ls是list缩写)</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Node-常用命令&quot;&gt;&lt;a href=&quot;#Node-常用命令&quot; class=&quot;headerlink&quot; title=&quot;Node 常用命令&quot;&gt;&lt;/a&gt;Node 常用命令&lt;/h3&gt;&lt;p&gt;清除 node_modules 文件 ：rm -rvf node_modules/&lt;
      
    
    </summary>
    
      <category term="Web" scheme="https://pszh.github.io/categories/Web/"/>
    
    
      <category term="node" scheme="https://pszh.github.io/tags/node/"/>
    
      <category term="npm" scheme="https://pszh.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>esLint</title>
    <link href="https://pszh.github.io/2019/01/18/eslint/"/>
    <id>https://pszh.github.io/2019/01/18/eslint/</id>
    <published>2019-01-18T02:15:09.203Z</published>
    <updated>2019-01-18T02:15:09.203Z</updated>
    
    <content type="html"><![CDATA[<h3 id="esLint-介绍"><a href="#esLint-介绍" class="headerlink" title="esLint 介绍"></a>esLint 介绍</h3><p>​    团队开发    ，统一代码风格 </p><p>​    命令介绍  <a href="https://eslint.org/docs/user-guide/command-line-interface" target="_blank" rel="noopener">https://eslint.org/docs/user-guide/command-line-interface</a></p><h3 id="安装-amp-初始化配置文件"><a href="#安装-amp-初始化配置文件" class="headerlink" title="安装 &amp; 初始化配置文件"></a>安装 &amp; 初始化配置文件</h3><h4 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h4><p>​        1. npm install -g eslint</p><p>​        2. eslint –init</p><p>​        然后一系列的配置 </p><h4 id="本地项目"><a href="#本地项目" class="headerlink" title="本地项目"></a>本地项目</h4><p>​        1.  npm install eslint –save-dev</p><p>​        2.  ./node_modules/.bin/eslint –init  (需要当前项目路径)</p><p>​        然后一系列配置</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><pre><code>#### eslintrc文件配置</code></pre><p>​    规则配置文件 ，  通过上面 init 方式配置的都是在项目最外层生成一个配置文件， （当然你也可以在package.json）</p><p>​    官方文档 <a href="https://eslint.org/docs/user-guide/configuring" target="_blank" rel="noopener">https://eslint.org/docs/user-guide/configuring</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"env"</span>: &#123;   <span class="comment">// 指定环境</span></span><br><span class="line">        <span class="string">"node"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"commonjs"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"es6"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"globals"</span>: &#123; <span class="comment">//指定全局</span></span><br><span class="line">        <span class="string">"var1"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"var2"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="string">"plugins"</span>:&#123; <span class="comment">//配置插件  先通过  npm install --save-dev eslint-plugin-react  最好在init前安装</span></span><br><span class="line">        <span class="string">"eslint-plugin-react"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="string">"extends"</span>: <span class="string">"eslint:recommended"</span>, <span class="comment">//扩展配置文件</span></span><br><span class="line">    <span class="string">"parserOptions"</span>: &#123;  <span class="comment">//指定解析器选项</span></span><br><span class="line">        <span class="string">"ecmaVersion"</span>: <span class="number">2016</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"rules"</span>: &#123; <span class="comment">// 配置规则  https://eslint.org/docs/rules/</span></span><br><span class="line">        <span class="string">"indent"</span>: [</span><br><span class="line">            <span class="string">"error"</span>,</span><br><span class="line">            <span class="string">"tab"</span> 使用tab键</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"linebreak-style"</span>: [</span><br><span class="line">            <span class="string">"error"</span>,</span><br><span class="line">            <span class="string">"unix"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"quotes"</span>: [ </span><br><span class="line">            <span class="string">"error"</span>,</span><br><span class="line">            <span class="string">"single"</span> 单引号</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"semi"</span>: [ </span><br><span class="line">            <span class="string">"error"</span>,</span><br><span class="line">            <span class="string">"always"</span> 使用分号</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="部分文件忽略检测"><a href="#部分文件忽略检测" class="headerlink" title="部分文件忽略检测"></a>部分文件忽略检测</h4><p> 在 eslintrc同目录下创建 .eslintignore 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># /node_modules/* and /bower_components/* 这个是默认忽略的</span><br><span class="line"></span><br><span class="line"># Ignore built files except build/index.js  忽略build下的文件除了 index.js</span><br><span class="line">build/*</span><br><span class="line">!build/index.js</span><br><span class="line"># 忽略 dist目录下文件</span><br><span class="line">dist/*</span><br></pre></td></tr></table></figure><h4 id="手动检测代码，自动修复格式化"><a href="#手动检测代码，自动修复格式化" class="headerlink" title="手动检测代码，自动修复格式化"></a>手动检测代码，自动修复格式化</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">eslint --ext src <span class="comment">//手动检测src文件夹下的.js   --ext 默认 .js </span></span><br><span class="line">eslint --ext .js .vue src <span class="comment">//手动检测src下的 .js .vue 文件</span></span><br><span class="line"></span><br><span class="line">eslint --fix src<span class="comment">//修复大部分的格式问题</span></span><br></pre></td></tr></table></figure><h4 id="结合webpack使用"><a href="#结合webpack使用" class="headerlink" title="结合webpack使用"></a>结合webpack使用</h4><p>​    安装一个eslint-loader 的loader​ </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">module:&#123;  </span><br><span class="line">preLoaders: [ //安全起见用这个preLoaders, 如果用loaders,且使用了babel-loader，那babel-loader必须在eslint-loader之前配置</span><br><span class="line">&#123; test: /\.js$/,  loader: &quot;eslint-loader&quot;, exclude: /node_modules/&#125;</span><br><span class="line">],  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="git-代码提交前检测"><a href="#git-代码提交前检测" class="headerlink" title="git 代码提交前检测"></a>git 代码提交前检测</h3><p>​    这个时候不得不提一下git hook了（<a href="https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90）​" target="_blank" rel="noopener">https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90）​</a>    </p><p>​    查看当前目录下的hook文件     cd .git/hooks &amp;&amp; ls      </p><p>​    然后看到 很多.sample 的文件，前面对应git 钩子一些操作， 而 .sample 后缀都是未启动状态，对应的钩子要生效，需要用shell脚本把.sample去掉，如何用js去掉，</p><p>​    <strong>这里才是重点 </strong> (⚠️必须在git仓库添加之后)</p><ol><li><p>安装pre-commit   </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pre-commit --save-dev</span><br></pre></td></tr></table></figure></li><li><p>配置package.json</p></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">第一种//执行静态文件检查</span><br><span class="line">"scripts": &#123;</span><br><span class="line">    "lint": "eslint --ext .js --cache --fix src", //保证eslint在提交时会校验src目录下的js文件</span><br><span class="line">  &#125;,</span><br><span class="line">  "pre-commit": [</span><br><span class="line">    "lint",</span><br><span class="line">  ]</span><br><span class="line">第二种 //只校验提交代码</span><br><span class="line">"scripts": &#123;</span><br><span class="line">     "lint": "eslint src --ext .js --cache --fix",</span><br><span class="line">     "pre-lint": "node check.js"//https://www.jianshu.com/p/072a96633479</span><br><span class="line">&#125;,</span><br><span class="line">"pre-commit": [</span><br><span class="line">     "pre-lint",</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="制定自己的规则"><a href="#制定自己的规则" class="headerlink" title="制定自己的规则"></a>制定自己的规则</h3><p><a href="https://eslint.org/docs/user-guide/command-line-interface" target="_blank" rel="noopener">https://eslint.org/docs/user-guide/command-line-interface</a></p><h3 id="其他的配置"><a href="#其他的配置" class="headerlink" title="其他的配置"></a>其他的配置</h3><ol><li>standardjs：<a href="https://standardjs.com/readme-zhcn.html" target="_blank" rel="noopener">https://standardjs.com/readme-zhcn.html</a>     （集成度很好 ，包括git hook）</li><li>prettier：<a href="https://zhuanlan.zhihu.com/p/34188596" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/34188596</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;esLint-介绍&quot;&gt;&lt;a href=&quot;#esLint-介绍&quot; class=&quot;headerlink&quot; title=&quot;esLint 介绍&quot;&gt;&lt;/a&gt;esLint 介绍&lt;/h3&gt;&lt;p&gt;​    团队开发    ，统一代码风格 &lt;/p&gt;
&lt;p&gt;​    命令介绍  &lt;a
      
    
    </summary>
    
      <category term="Web" scheme="https://pszh.github.io/categories/Web/"/>
    
    
      <category term="eslint" scheme="https://pszh.github.io/tags/eslint/"/>
    
  </entry>
  
</feed>
